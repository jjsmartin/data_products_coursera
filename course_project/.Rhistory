t3 <- loess(t)
?loess
t3 <- loess(t.ts)
?SMA
library("TTR")
?SMA
SMA(t2)
t2 <- SMA(t.ts)
plot(t.ts)
lines(t2,col="red")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
?SMA
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
?SMA
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
runApp("course_project")
install_github( 'slidify', 'ramnathv' )
install_github( 'slidifyLibraries', 'ramnathv' )
library(slidify)
intall.packages( "devtools" )
library(devtools)
install_github( 'slidify', 'ramnathv' )
install_github( 'slidifyLibraries', 'ramnathv' )
library(slidify)
install.packages("devtools")
library(devtools)
install_github( 'slidify', 'ramnathv' )
install_github( 'slidifyLibraries', 'ramnathv' )
library(slidify)
setwd( "C:\\Users\\jjsm\\Documents\\Coursera\\Developing Data Products\\course_project_slides" )
author( "flu_deck" )
install.packages( "devtools" )
library(devtools)
install_github( 'slidify', 'ramnathv' )
install_github( 'slidifyLibraries', 'ramnathv' )
setwd( "C:\\Users\\jjsm\\Documents\\Coursera\\Developing Data Products" )
author( "course_project_slides" )
source('~/Coursera/Developing Data Products/slidify_Setup.R')
slidify( "course_project_slides" )
getwd()
setwd( "C:\\Users\\jjsm\\Documents\\Coursera\\Developing Data Products" )
slidify( "course_project_slides" )
slidify( "course_project_slides" )
slidify( "course_project_slides" )
slidify( "course_project_slides" )
slidify( "course_project_slides" )
slidify( "course_project_slides" )
source('~/Coursera/Developing Data Products/slidify_Setup.R')
source('~/Coursera/Developing Data Products/slidify_Setup.R')
source('~/Coursera/Developing Data Products/slidify_Setup.R')
slidify( "coutse_project" )
slidify( "course_project" )
library(slidify)
getwd()
slidify( "course_project" )
setwd( "C:\\Users\\jjsm\\Documents\\Coursera\\Developing Data Products" )
source('~/Coursera/Developing Data Products/slidify_Setup.R')
setwd( "C:\\Users\\jjsm\\Documents\\Coursera\\Developing Data Products" )
slidify( "course_project" )
slidify( "course_project" )
slidify( "course_project_slides" )
source('~/Coursera/Developing Data Products/slidify_Setup.R')
source('~/Coursera/Developing Data Products/slidify_Setup.R')
source('~/Coursera/Developing Data Products/slidify_Setup.R')
source('~/Coursera/Developing Data Products/slidify_Setup.R')
source('~/Coursera/Developing Data Products/slidify_Setup.R')
source('~/Coursera/Developing Data Products/slidify_Setup.R')
slidify( "course_project_slides" )
slidify( "course_project_slides.Rmd" )
setwd( "C:\\Users\\jjsm\\Documents\\Coursera\\Developing Data Products\\course_project\\slides" )
source('~/Coursera/Developing Data Products/slidify_Setup.R')
setwd( "C:\\Users\\jjsm\\Documents\\Coursera\\Developing Data Products\\course_project\\slides" )
source('~/Coursera/Developing Data Products/slidify_Setup.R')
setwd( "C:\\Users\\jjsm\\Documents\\Coursera\\Developing Data Products\\course_project_slides" )
slidify( "course_project_slides.Rmd" )
library(slidify)
slidify( "course_project_slides.Rmd" )
source('~/Coursera/Developing Data Products/slidify_Setup.R')
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
## Plot a select of time series, as determined by UI checkboxes
library(shiny)
library("TTR")  # for SMA() smoothing function
shinyServer(function(input, output) {
# read in the data
flu <- read.csv( "fludata.csv",
header = TRUE)
# used for the construction of time series object
# (this bit is not recalculated each time the widget changes)
start.year <- flu$YEAR[ 1 ]
start.week <- flu$WEEK[ 1 ]
end.year   <- flu$YEAR[ length(flu$YEAR) ]
end.week   <- flu$WEEK[ length(flu$WEEK) ]
# construct a time series object with the selected variables, then plot it
flu.ts <- ts( data = cbind( flu$AGE.all, flu$AGE.0.4, flu$AGE.5.24, flu$AGE.25.49, flu$AGE.50.64, flu$AGE.65 ),
start = 1,
end = 250 )
# plot a subset of the time series according to the checkbox selections from ui.R
# (this bit is re-run everytime the associated widget changes)
output$plot1 <- renderPlot({
# create a list of the indices of the selected variables
selected_vars <- list()
for ( i in 1:6 ) {
if ( i %in% input$checkGroup ){
selected_vars <- c( selected_vars, i )
}
}
selected_vars <- sort( unlist( selected_vars ) ) # it's a list of lists otherwise. Sort to get consistency with colours (see below)
# smooth the time series values if smoothing is selected
flu.ts <- apply( flu.ts, 2, SMA, n=input$slider1 )
# plot a time series plot with the selected time series variables
plot.ts(  flu.ts[, selected_vars ],
plot.type = "single",
ylab      = "number of cases",
xlab      = "time",
col       = c("black", "red", "orange", "green", "blue", "purple")[ selected_vars ],  # for consistency in colours
ylim      = c(0,70000),
axes      = FALSE )   # don't plot the axis yet
# plot the axis separately, so we can label it better
weeks <- seq( as.Date( "2009/9/28"), length.out=length( flu$AGE.all ), by="10 weeks" )   # I *think* this is the right date...
axis( 1,  # x axis
labels = weeks,
at     = seq(from=1, by=10, length.out=length(weeks) ) )
box()
})
})
## Plot a select of time series, as determined by UI checkboxes
library(shiny)
library("TTR")  # for SMA() smoothing function
shinyServer(function(input, output) {
# read in the data
flu <- read.csv( "fludata.csv",
header = TRUE)
# used for the construction of time series object
# (this bit is not recalculated each time the widget changes)
start.year <- flu$YEAR[ 1 ]
start.week <- flu$WEEK[ 1 ]
end.year   <- flu$YEAR[ length(flu$YEAR) ]
end.week   <- flu$WEEK[ length(flu$WEEK) ]
# construct a time series object with the selected variables, then plot it
flu.ts <- ts( data = cbind( flu$AGE.all, flu$AGE.0.4, flu$AGE.5.24, flu$AGE.25.49, flu$AGE.50.64, flu$AGE.65 ),
start = 1,
end = 250 )
# plot a subset of the time series according to the checkbox selections from ui.R
# (this bit is re-run everytime the associated widget changes)
output$plot1 <- renderPlot({
# create a list of the indices of the selected variables
selected_vars <- list()
for ( i in 1:6 ) {
if ( i %in% input$checkGroup ){
selected_vars <- c( selected_vars, i )
}
}
selected_vars <- sort( unlist( selected_vars ) ) # it's a list of lists otherwise. Sort to get consistency with colours (see below)
# smooth the time series values if smoothing is selected
flu.ts <- apply( flu.ts, 2, SMA, n=input$slider1 )
# plot a time series plot with the selected time series variables
plot.ts(  flu.ts[, selected_vars ],
plot.type = "single",
ylab      = "number of cases",
xlab      = "time",
col       = c("black", "red", "orange", "green", "blue", "purple")[ selected_vars ],  # for consistency in colours
ylim      = c(0,70000),
axes      = FALSE )   # don't plot the axis yet
# plot the axis separately, so we can label it better
weeks <- seq( as.Date( "2009/9/28"), length.out=length( flu$AGE.all ), by="10 weeks" )   # I *think* this is the right date...
axis( 1,  # x axis
labels = weeks,
at     = seq(from=1, by=10, length.out=length(weeks) ) )
box()
})
})
slidify( "index.Rmd" )
gtwd()
getwd()
?shinyAppDir
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
slidify( "index.Rmd" )
t <- system.file("/course_project", package="shiny"),
t <- system.file("course_project", package="shiny"),
t <- system.file("/course_project", package="shiny")
t
t <- system.file("course_project", package="shiny")
t
t <- system.file("C:\\Users\\jjsm\Documents\\Coursera\\Developing Data Products\\course_project_slides\\course_project, package="shiny")
t <- system.file("C:\\Users\\jjsm\\Documents\\Coursera\\Developing Data Products\\course_project_slides\\course_project, package="shiny")
t <- system.file("C:\\Users\\jjsm\\Documents\\Coursera\\Developing Data Products\\course_project_slides\\course_project", package="shiny")
t
?system.file
t <- system.file("course_project", package="course_project")
t
t <- system.file("course_project")
t
t <- system.file("C:\\Users\\jjsm\\Documents\\Coursera\\Developing Data Products\\course_project_slides\\course_project")
t
t <- system.file("C:\\Users\\jjsm\\Documents\\Coursera\\Developing Data Products\\course_project_slides\\course_project", package="shiny")
t
t <- file("C:\\Users\\jjsm\\Documents\\Coursera\\Developing Data Products\\course_project_slides\\course_project")
t
slidify("index.Rmd")
slidify("index.Rmd")
?shinyAppDir
system.file("course_project")
getwd()
system.file("C:")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
system.file("course_project")
?system.file
pwd
getwd()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
runApp("index.Rmd")
## UI for flu time series display
library(shiny)
shinyUI(fluidPage(
fluidRow(
titlePanel("Number of Flu Cases in USA, 2009 to 2014"),
plotOutput("plot1"),
hr(),
# slider setting the order of smoothing (i.e. the number of weeks to average over )
column(6,
wellPanel(
sliderInput("slider1",
label = h5("Number of weeks to average over:"),
min = 1,
max = 20,
value = 1) ) ),
# checkboxes for selection of the diferent time series
column( 3, offset= 1,
wellPanel(
checkboxGroupInput( "checkGroup",
label   = h3("Age ranges"),
choices = list( "All ages"  = 1,
"0 to 4"    = 2,
"5 to 24"   = 3,
"25 to 49"  = 4,
"50 to 64"  = 5,
"65+"       = 6),
selected = 1) ) )
)))
selected_vars <- list()
## Plot a select of time series, as determined by UI checkboxes
library(shiny)
library("TTR")  # for SMA() smoothing function
shinyServer(function(input, output) {
# read in the data
flu <- read.csv( "fludata.csv",
header = TRUE)
# used for the construction of time series object
# (this bit is not recalculated each time the widget changes)
start.year <- flu$YEAR[ 1 ]
start.week <- flu$WEEK[ 1 ]
end.year   <- flu$YEAR[ length(flu$YEAR) ]
end.week   <- flu$WEEK[ length(flu$WEEK) ]
# construct a time series object with the selected variables, then plot it
flu.ts <- ts( data = cbind( flu$AGE.all, flu$AGE.0.4, flu$AGE.5.24, flu$AGE.25.49, flu$AGE.50.64, flu$AGE.65 ),
start = 1,
end = 250 )
# plot a subset of the time series according to the checkbox selections from ui.R
# (this bit is re-run everytime the associated widget changes)
output$plot1 <- renderPlot({
# create a list of the indices of the selected variables
selected_vars <- list()
for ( i in 1:6 ) {
if ( i %in% input$checkGroup ){
selected_vars <- c( selected_vars, i )
}
}
selected_vars <- sort( unlist( selected_vars ) ) # it's a list of lists otherwise. Sort to get consistency with colours (see below)
# smooth the time series values if smoothing is selected
flu.ts <- apply( flu.ts, 2, SMA, n=input$slider1 )
# plot a time series plot with the selected time series variables
plot.ts(  flu.ts[, selected_vars ],
plot.type = "single",
ylab      = "number of cases",
xlab      = "time",
col       = c("black", "red", "orange", "green", "blue", "purple")[ selected_vars ],  # for consistency in colours
ylim      = c(0,70000),
axes      = FALSE )   # don't plot the axis yet
# plot the axis separately, so we can label it better
weeks <- seq( as.Date( "2009/9/28"), length.out=length( flu$AGE.all ), by="10 weeks" )   # I *think* this is the right date...
axis( 1,  # x axis
labels = weeks,
at     = seq(from=1, by=10, length.out=length(weeks) ) )
box()
})
})
runApp("index.Rmd")
getwd()
setwd("C:/Users/jjsm/Documents/Coursera/Developing Data Products")
getwd()
runApp("index.Rmd")
setwd("C:/Users/jjsm/Documents/Coursera/Developing Data Products/course_project_slides/course_project")
getwd()
setwd("C:/Users/jjsm/Documents/Coursera/Developing Data Products/course_project_slides/course_project")
setwd("C:\\Users\\jjsm\\Documents\\Coursera\\Developing Data Products\\course_project_slides\\course_project")
## UI for flu time series display
library(shiny)
shinyUI(fluidPage(
fluidRow(
titlePanel("Number of Flu Cases in USA, 2009 to 2014"),
plotOutput("plot1"),
hr(),
# slider setting the order of smoothing (i.e. the number of weeks to average over )
column(6,
wellPanel(
sliderInput("slider1",
label = h5("Number of weeks to average over:"),
min = 1,
max = 20,
value = 1) ) ),
# checkboxes for selection of the diferent time series
column( 3, offset= 1,
wellPanel(
checkboxGroupInput( "checkGroup",
label   = h3("Age ranges"),
choices = list( "All ages"  = 1,
"0 to 4"    = 2,
"5 to 24"   = 3,
"25 to 49"  = 4,
"50 to 64"  = 5,
"65+"       = 6),
selected = 1) ) )
)))
## Plot a select of time series, as determined by UI checkboxes
library(shiny)
library("TTR")  # for SMA() smoothing function
shinyServer(function(input, output) {
# read in the data
flu <- read.csv( "fludata.csv",
header = TRUE)
# used for the construction of time series object
# (this bit is not recalculated each time the widget changes)
start.year <- flu$YEAR[ 1 ]
start.week <- flu$WEEK[ 1 ]
end.year   <- flu$YEAR[ length(flu$YEAR) ]
end.week   <- flu$WEEK[ length(flu$WEEK) ]
# construct a time series object with the selected variables, then plot it
flu.ts <- ts( data = cbind( flu$AGE.all, flu$AGE.0.4, flu$AGE.5.24, flu$AGE.25.49, flu$AGE.50.64, flu$AGE.65 ),
start = 1,
end = 250 )
# plot a subset of the time series according to the checkbox selections from ui.R
# (this bit is re-run everytime the associated widget changes)
output$plot1 <- renderPlot({
# create a list of the indices of the selected variables
selected_vars <- list()
for ( i in 1:6 ) {
if ( i %in% input$checkGroup ){
selected_vars <- c( selected_vars, i )
}
}
selected_vars <- sort( unlist( selected_vars ) ) # it's a list of lists otherwise. Sort to get consistency with colours (see below)
# smooth the time series values if smoothing is selected
flu.ts <- apply( flu.ts, 2, SMA, n=input$slider1 )
# plot a time series plot with the selected time series variables
plot.ts(  flu.ts[, selected_vars ],
plot.type = "single",
ylab      = "number of cases",
xlab      = "time",
col       = c("black", "red", "orange", "green", "blue", "purple")[ selected_vars ],  # for consistency in colours
ylim      = c(0,70000),
axes      = FALSE )   # don't plot the axis yet
# plot the axis separately, so we can label it better
weeks <- seq( as.Date( "2009/9/28"), length.out=length( flu$AGE.all ), by="10 weeks" )   # I *think* this is the right date...
axis( 1,  # x axis
labels = weeks,
at     = seq(from=1, by=10, length.out=length(weeks) ) )
box()
})
})
runApp("index.Rmd")
setwd("C:\\Users\\jjsm\\Documents\\Coursera\\Developing Data Products\\course_project_slides\\course_project")
setwd("C:/Users/jjsm/Documents/Coursera/Developing Data Products/course_project_slides/course_project")
gete
getwd()
runApp("course_project")
setwd("C:/Users/jjsm/Documents/Coursera/Developing Data Products/course_project_slides")
runApp("fluApp")
runApp("flu_app")
getwd()
setwd( "C:\\Users\\jjsm\\Documents\\Coursera\\Developing Data Products\\course_project_slides" )
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
source('~/Coursera/Developing Data Products/slidify_Setup.R')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
?appDir
?shinyAppDir
runApp("course_project")
runApp("flu_app")
slidify("index.Rmd")
slidify("index.Rmd")
